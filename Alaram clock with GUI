import tkinter as tk
from tkinter import messagebox
import datetime
import time

class AlarmClock:
    def __init__(self, root):
        self.root = root
        self.root.title("Alarm Clock")

        # Initialize variables
        self.alarm_time = None
        self.alarm_label = tk.Label(root, text="Set Alarm Time:")
        self.alarm_label.pack(pady=10)

        # Entry for setting alarm time
        self.alarm_entry = tk.Entry(root)
        self.alarm_entry.pack(pady=10)

        # Button to set the alarm
        self.set_alarm_button = tk.Button(root, text="Set Alarm", command=self.set_alarm)
        self.set_alarm_button.pack(pady=10)

        # Button to stop the alarm
        self.stop_alarm_button = tk.Button(root, text="Stop Alarm", command=self.stop_alarm, state=tk.DISABLED)
        self.stop_alarm_button.pack(pady=10)

    def set_alarm(self):
        alarm_time_str = self.alarm_entry.get()

        try:
            self.alarm_time = datetime.datetime.strptime(alarm_time_str, "%H:%M")
            current_time = datetime.datetime.now().time()

            if self.alarm_time.time() < current_time:
                tomorrow = datetime.datetime.now() + datetime.timedelta(days=1)
                self.alarm_time = datetime.datetime.combine(tomorrow.date(), self.alarm_time.time())

            # Enable stop alarm button
            self.stop_alarm_button.config(state=tk.NORMAL)

            # Start checking the time
            self.check_alarm()

        except ValueError:
            messagebox.showerror("Error", "Invalid time format. Please use HH:MM.")

    def check_alarm(self):
        current_time = datetime.datetime.now().time()

        if current_time.hour == self.alarm_time.time().hour and current_time.minute == self.alarm_time.time().minute:
            messagebox.showinfo("Alarm", "Wake up!")
            self.stop_alarm()

        # Check every 1 second
        self.root.after(1000, self.check_alarm)

    def stop_alarm(self):
        self.alarm_time = None
        self.alarm_entry.delete(0, tk.END)
        self.stop_alarm_button.config(state=tk.DISABLED)

if __name__ == "__main__":
    root = tk.Tk()
    alarm_clock = AlarmClock(root)
    root.mainloop()
